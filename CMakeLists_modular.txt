cmake_minimum_required(VERSION 3.16)
project(PianoSynthModular VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Build configuration
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(BUILD_SHARED_LIBS ON)

# Compiler-specific options
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -O3 -fPIC")
endif()

# Find required packages
find_package(PkgConfig REQUIRED)

# ALSA for Linux audio
pkg_check_modules(ALSA REQUIRED alsa)

# RtMidi for MIDI input
find_path(RTMIDI_INCLUDE_DIR RtMidi.h PATHS /usr/include/rtmidi)
find_library(RTMIDI_LIBRARY rtmidi)

# PortAudio for cross-platform audio
pkg_check_modules(PORTAUDIO REQUIRED portaudio-2.0)

# LAME for MP3 encoding (optional)
find_library(LAME_LIBRARY mp3lame)
find_path(LAME_INCLUDE_DIR lame.h PATHS /usr/include/lame)

# JSON library (nlohmann/json or similar)
find_package(nlohmann_json QUIET)
if(NOT nlohmann_json_FOUND)
    message(STATUS "nlohmann_json not found, using bundled header")
endif()

# Common include directories
set(SHARED_INCLUDE_DIRS
    ${CMAKE_SOURCE_DIR}/shared/interfaces
    ${CMAKE_SOURCE_DIR}/shared/utils
)

# Output directories for DLLs
set(DLL_OUTPUT_DIR ${CMAKE_BINARY_DIR}/dlls)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DLL_OUTPUT_DIR})

# Create output directories
file(MAKE_DIRECTORY ${DLL_OUTPUT_DIR})
file(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

# Shared utilities library
add_library(piano_shared STATIC
    shared/utils/json_config.cpp
    shared/utils/audio_utils.cpp
    shared/utils/math_utils.cpp
    shared/utils/logger.cpp
)

target_include_directories(piano_shared PUBLIC ${SHARED_INCLUDE_DIRS})

# ==================== INPUT DLL ====================
add_library(piano_input SHARED
    core/input/input_processor.cpp
    core/input/midi_detector.cpp
    core/input/device_manager.cpp
)

target_include_directories(piano_input PRIVATE
    ${SHARED_INCLUDE_DIRS}
    ${RTMIDI_INCLUDE_DIR}
)

target_link_libraries(piano_input
    piano_shared
    ${RTMIDI_LIBRARY}
    ${CMAKE_DL_LIBS}
)

# ==================== ABSTRACTION DLL ====================
add_library(piano_abstraction SHARED
    core/abstraction/abstraction_processor.cpp
    core/abstraction/event_processor.cpp
    core/abstraction/velocity_processor.cpp
    core/abstraction/timing_processor.cpp
)

target_include_directories(piano_abstraction PRIVATE ${SHARED_INCLUDE_DIRS})

target_link_libraries(piano_abstraction
    piano_shared
    ${CMAKE_DL_LIBS}
)

# ==================== PIANO INSTRUMENT DLL ====================
add_library(piano_instrument SHARED
    instruments/piano/piano_synthesizer.cpp
    instruments/piano/string_model.cpp
    instruments/piano/hammer_model.cpp
    instruments/piano/resonance_model.cpp
    instruments/piano/wave_equation_solver.cpp
)

target_include_directories(piano_instrument PRIVATE ${SHARED_INCLUDE_DIRS})

target_link_libraries(piano_instrument
    piano_shared
    m
    ${CMAKE_DL_LIBS}
)

# ==================== OUTPUT DLL ====================
add_library(piano_output SHARED
    core/output/output_processor.cpp
    core/output/alsa_output.cpp
    core/output/portaudio_output.cpp
    core/output/bare_metal_output.cpp
    core/output/recording_manager.cpp
)

target_include_directories(piano_output PRIVATE
    ${SHARED_INCLUDE_DIRS}
    ${ALSA_INCLUDE_DIRS}
    ${PORTAUDIO_INCLUDE_DIRS}
    ${LAME_INCLUDE_DIR}
)

target_link_libraries(piano_output
    piano_shared
    ${ALSA_LIBRARIES}
    ${PORTAUDIO_LIBRARIES}
    ${LAME_LIBRARY}
    ${CMAKE_DL_LIBS}
)

# ==================== CORE ENGINE DLL ====================
add_library(piano_core SHARED
    core/engine/core_engine.cpp
    core/engine/dll_manager.cpp
    core/engine/audio_mixer.cpp
    core/engine/config_manager.cpp
)

target_include_directories(piano_core PRIVATE ${SHARED_INCLUDE_DIRS})

target_link_libraries(piano_core
    piano_shared
    ${CMAKE_DL_LIBS}
    pthread
)

# ==================== MAIN APPLICATION ====================
add_executable(piano_synth
    app/main.cpp
    app/application.cpp
    app/cli_interface.cpp
)

target_include_directories(piano_synth PRIVATE ${SHARED_INCLUDE_DIRS})

target_link_libraries(piano_synth
    piano_shared
    ${CMAKE_DL_LIBS}
)

# ==================== TESTS ====================
option(BUILD_TESTS "Build test suite" ON)

if(BUILD_TESTS)
    find_package(GTest QUIET)
    if(GTest_FOUND)
        enable_testing()
        add_subdirectory(tests)
    else()
        message(WARNING "GTest not found, skipping tests")
    endif()
endif()

# ==================== INSTALLATION ====================
# Install DLLs
install(TARGETS 
    piano_input 
    piano_abstraction 
    piano_instrument 
    piano_output 
    piano_core
    LIBRARY DESTINATION lib/piano-synth
    RUNTIME DESTINATION lib/piano-synth
)

# Install main application
install(TARGETS piano_synth DESTINATION bin)

# Install configuration files
install(DIRECTORY config/ DESTINATION share/piano-synth/config)

# Install shared interfaces for development
install(DIRECTORY shared/interfaces/ DESTINATION include/piano-synth)

# ==================== PACKAGING ====================
set(CPACK_PACKAGE_NAME "piano-synth")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_DESCRIPTION "Modular Piano Synthesizer with Physical Modeling")
set(CPACK_PACKAGE_CONTACT "piano-synth@example.com")

if(UNIX AND NOT APPLE)
    set(CPACK_GENERATOR "DEB;RPM;TGZ")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libasound2, libportaudio2, librtmidi7")
endif()

include(CPack)

# ==================== DEVELOPMENT HELPERS ====================
# Create symlinks to config files in build directory for development
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    file(CREATE_LINK ${CMAKE_SOURCE_DIR}/config ${CMAKE_BINARY_DIR}/config SYMBOLIC)
endif()

# Print build summary
message(STATUS "=== Piano Synth Modular Build Configuration ===")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "DLL output directory: ${DLL_OUTPUT_DIR}")
message(STATUS "Runtime output directory: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
message(STATUS "ALSA found: ${ALSA_FOUND}")
message(STATUS "PortAudio found: ${PORTAUDIO_FOUND}")
message(STATUS "RtMidi found: ${RTMIDI_LIBRARY}")
message(STATUS "LAME found: ${LAME_LIBRARY}")
message(STATUS "Build tests: ${BUILD_TESTS}")
message(STATUS "==============================================")
